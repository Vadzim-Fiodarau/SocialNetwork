{"version":3,"sources":["components/Dialogs/Mesages/Message.module.css","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/dialogs-reducer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Mesages/Message.tsx","common/FormsControls/FormsControls.tsx","units/validators.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","api/api.ts","redux/users-reducer.ts","assets/img/users.jpg","components/users/Users.tsx","assets/img/preloader.gif","common/Preloader/Preloader.tsx","components/users/UsersContainer.tsx","components/Profile/MyPosts/ProfileInfo/ProfileStatus.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","reportWebVitals.ts","redux/sidebar-reducer.tsx","redux/redux-store.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","common/FormsControls/FormsControls.module.css","components/users/users.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css"],"names":["module","exports","Navbar","className","classes","nav","item","to","activeClassName","s","activeLink","News","Music","Settings","SEND_MESSAGE","initialState","dialogs","id","name","src","messages","message","DialogItem","props","path","dialogsItem","active","img","Message","FormControl","input","meta","hasError","touched","error","formControl","children","Textarea","restProps","child","Input","required","value","maxLengthCreator","maxLength","length","maxLength50","Dialogs","state","dialogsPage","dialogsElements","map","d","messagesElements","m","newMessageBody","DialogsReduxForm","onSubmit","formData","sendMessage","reduxForm","form","handleSubmit","Field","placeholder","component","validate","mapStateToPropsForRedirect","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","React","connect","compose","dispatch","type","sendMessageCreator","instance","axios","create","withCredentials","baseURL","headers","userAPI","currentPage","pageSize","get","then","response","data","post","delete","userId","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","toggleIsFollowingProgress","usersReducer","action","u","followed","totalCount","filter","Users","pagesCount","Math","ceil","pages","i","push","p","styles","selectedPage","onClick","onPageChanged","photos","small","userPhoto","disabled","some","unFollow","follow","Preloader","preloader","UsersContainer","pageNumber","getUsers","usersPage","setCurrentPage","setUsers","items","userID","resultCode","ProfileStatus","editMode","activatedEditMode","setState","deactivatedEditMode","onStatusChange","e","currentTarget","prevProps","prevState","onDoubleClick","autoFocus","onBlur","onChange","ProfileInfo","profile","descriptionBlock","large","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","lookingForAJob","lookingForAJobDescription","fullName","ADD_POST","UPDATE_NEW_POST_TEXT","SET_USER_TYPE","SET_STATUS","posts","likeCounter","setStatus","Post","MyPosts","elementsPosts","postBlock","MyPostReduxForm","addPost","newPostText","MyPostsContainer","profilePage","addPostActionCreator","updateNewPostText","text","newText","updateNewPostTextActionCreator","Profile","ProfileContainer","match","params","getUserProfile","getUserStatus","withRouter","Header","header","loginBlock","login","logout","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","HeaderContainer","LoginReduxForm","App","render","DialogsContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","newPost","body","sidebar","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f220d40a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__1sTUN\",\"message\":\"Message_message__1H2F1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3ZXvl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__TQXH5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1fzNT\",\"item\":\"Navbar_item__2KL9v\",\"activeLink\":\"Navbar_activeLink__2OYrY\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Navbar.module.css'\r\nimport s from './Navbar.module.css'\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Message</NavLink>\r\n            </div>\r\n          <div className={classes.item}>\r\n            <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n          </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n          <div className={classes.item}>\r\n            <NavLink to='/login' activeClassName={s.activeLink}>Login</NavLink>\r\n          </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\n\r\n\r\n\r\nconst  News = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default News","import React from 'react';\r\n\r\n\r\n\r\nconst  Music = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Music","import React from 'react';\r\n\r\n\r\n\r\nconst  Settings = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Settings","\r\nimport {messagesTypes} from \"../components/Dialogs/Mesages/Message\";\r\nimport {dialogsTypes} from \"../components/Dialogs/DialogItem/DialogItem\";\r\nimport {\r\n    ActionsTypes,\r\n    SendMessageActionType,\r\n    UpdateNewMessageBodyActionType\r\n} from \"./users-reducer\";\r\n\r\n\r\n// const UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY'\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\ntype StateDialogsPropsType = {\r\n    messages: Array<messagesTypes>\r\n    dialogs: Array<dialogsTypes>\r\n}\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Vadim',\r\n            src: 'https://sun9-75.userapi.com/impf/c630924/v630924802/1446a/s33tSPeU4Ik.jpg?size=720x1080&quality=96&sign=b00fd02c1e71a239a074008d458dcc40&type=album'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Kate',\r\n            src: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTirwV3sJSSt0Xf8C43cLbEv2sJR_qWmMpAKnEhdmZbl2b8Cnu8LKZ_CDDvidqsKm4-00k&usqp=CAU'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Alex',\r\n            src: 'https://www.interfax.ru/ftproot/photos/photostory/2019/07/09/week4_700.jpg'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Sveta',\r\n            src: 'https://www.istockphoto.com/resources/images/PhotoFTLP/Signature-1205756464.jpg'\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Dimych',\r\n            src: 'https://st4.styapokupayu.ru/images/blog_posts/covers/000/136/369_large.jpg?1576853877'\r\n        },\r\n\r\n\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your going?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'},\r\n    ],\r\n\r\n}\r\n\r\nexport const dialogsReducer = (state: StateDialogsPropsType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        // case UPDATE_NEW_MESSAGE_BODY:\r\n        //     return {\r\n        //         ...state,\r\n        //         newMessageBody: action.body\r\n        //     }\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const sendMessageCreator = (newMessageBody:string): SendMessageActionType => ({type: SEND_MESSAGE, newMessageBody}) as SendMessageActionType\r\n\r\n// export const updateNewMessageBodyCreator = (body: string): UpdateNewMessageBodyActionType =>\r\n//     ({type: UPDATE_NEW_MESSAGE_BODY, body: body})","import s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport type DialogItemProps = {\r\n    id: number\r\n    name: string\r\n    src:string\r\n}\r\nexport type dialogsTypes = {\r\n    id: number\r\n    name: string\r\n    src:string\r\n}\r\n\r\n\r\nconst DialogItem = (props: DialogItemProps) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n            <div className={s.dialogsItem + ' ' + s.active}>\r\n                <NavLink to={path}> <img className={s.img} src={props.src}/>  {props.name} </NavLink>\r\n\r\n            </div>\r\n    )\r\n}\r\nexport default DialogItem\r\n\r\n","import s from './Message.module.css'\r\nimport React from \"react\";\r\n\r\nexport type MessagePropsType = {\r\n    message: string\r\n    id: number\r\n}\r\nexport type messagesTypes = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n\r\n    // let newMessageElement: any = React.createRef<HTMLInputElement>();\r\n    //\r\n    // let addMessage = () => {\r\n    //     let text = newMessageElement.current.value;\r\n    //      alert(text)\r\n    // }\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div className={s.message}>{props.message}</div>\r\n                </div>\r\n                {/*<div>*/}\r\n                {/*    <div>*/}\r\n                {/*        <textarea ref={newMessageElement}></textarea>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div>*/}\r\n                {/*        <button onClick={addMessage}>Add message</button>*/}\r\n                {/*    </div>*/}\r\n                {/*</div>*/}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    export default Message\r\n","import s from './FormsControls.module.css'\r\n\r\ntype TextareaType = {\r\n  input: any\r\n  meta: any\r\n}\r\n\r\nconst FormControl: React.FC<TextareaType> = ({input, meta, ...props}) => {\r\n  const hasError = meta.touched && meta.error\r\n  return (\r\n    <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n      <div>\r\n        {props.children}\r\n      </div>\r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n  const {input, meta, child, ...restProps} = props\r\n  return <FormControl {...props}> <textarea {...restProps} {...input}/>\r\n  </FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n  const {input, meta, child, ...restProps} = props\r\n  return <FormControl {...props}> <input {...restProps} {...input}/> </FormControl>\r\n}\r\n\r\n","export const required = (value: string) => {\r\n  if(value) return undefined\r\n  return 'Filed is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n  return function (value: string){\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n  }\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Mesages/Message\";\r\nimport {dialogsPagePropsType} from \"../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormDataType} from \"../Login/Login\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../units/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\ntype DialogsPropsType = {\r\n  updateNewMessageBody: (body: string) => void\r\n  sendMessage: (newMessageBody: string) => void\r\n  dialogsPage: dialogsPagePropsType\r\n  isAuth: boolean\r\n\r\n}\r\n\r\ntype DialogsFormDataType = {\r\n  newMessageBody: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n  let state = props.dialogsPage\r\n\r\n  let dialogsElements = state.dialogs\r\n    .map((d: { name: string; id: number; src: string }) => <DialogItem\r\n      name={d.name} id={d.id} src={d.src}/>)\r\n\r\n\r\n  let messagesElements = state.messages\r\n    .map((m: { message: string; id: number; }) => <Message message={m.message}\r\n                                                           id={m.id}/>)\r\n\r\n\r\n  let newMessageBody = state.newMessageBody\r\n\r\n\r\n  // let onSendMessageClick = () => {\r\n  //   props.sendMessage()\r\n  // }\r\n\r\n  // let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n  //   let body = e.target.value\r\n  //   props.updateNewMessageBody(body)\r\n  // }\r\n\r\n  const onSubmit = (formData: DialogsFormDataType) => {\r\n    props.sendMessage(formData.newMessageBody)\r\n  }\r\n\r\n  return (\r\n\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItem}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n        {/*/!*<div>*!/*/}\r\n        {/*/!*  <div><textarea*!/*/}\r\n        {/*/!*    onChange={onNewMessageChange}*!/*/}\r\n        {/*/!*    value={newMessageBody}*!/*/}\r\n        {/*/!*    placeholder={'enter your name'}>*!/*/}\r\n        {/*/!*            </textarea></div>*!/*/}\r\n        {/*/!*  <div>*!/*/}\r\n        {/*/!*    <button onClick={onSendMessageClick}>Send</button>*!/*/}\r\n        {/*/!*  </div>*!/*/}\r\n        {/*</div>*/}\r\n\r\n        <DialogsReduxForm onSubmit={onSubmit}/>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Dialogs\r\n\r\n\r\nexport const DialogsForm: React.FC<InjectedFormProps<DialogsFormDataType>> = (props) => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field placeholder={'enter your name'} component={Textarea}\r\n               name={'newMessageBody'}\r\n               validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm<DialogsFormDataType>({form: 'message'})(DialogsForm)","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppPropsType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n  isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppPropsType): MapStateToPropsForRedirectType => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport function WithAuthRedirect <T>(Component: ComponentType<T>) {\r\n  class RedirectComponent extends React.Component<MapStateToPropsForRedirectType> {\r\n    render() {\r\n      const {isAuth, ...restProps} = this.props\r\n      if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n      return <Component{...restProps as T}/>\r\n    }\r\n  }\r\n\r\n  const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n  return ConnectedAuthRedirectComponent\r\n}","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {dialogsPagePropsType, statePropsType} from \"../../redux/store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppPropsType} from \"../../redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype mapStateType = {\r\n    dialogsPage: dialogsPagePropsType\r\n}\r\n\r\nconst mapStateToProps = (state: AppPropsType):mapStateType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        // updateNewMessageBody: (body:string) => {\r\n        //     dispatch(updateNewMessageBodyCreator(body))\r\n        // },\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n// compose(\r\n//   connect(mapStateToProps, mapDispatchToProps),\r\n//   WithAuthRedirect\r\n// )(Dialogs)\r\n//\r\n// const AuthRedirectComponent = WithAuthRedirect(Dialogs)\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  WithAuthRedirect\r\n)(Dialogs)","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': '6a839c08-d4d3-4bf1-a317-273f31facc46'\r\n  }\r\n})\r\n\r\nexport const userAPI = {\r\n  getUsers (currentPage: number, pageSize: number) {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then(response => {\r\n        return response.data\r\n      })\r\n  },\r\n  followed(id: number) {\r\n    return instance.post(`follow/${id}`)\r\n      .then(response => {\r\n        return response.data\r\n      })\r\n  },\r\n  unFollowed(id: number) {\r\n  return instance.delete(`follow/${id}`)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n},\r\n  getProfile(userId: number) {\r\n    console.warn('Obsolete method. Please profileAPI object')\r\n   // return  instance.get(`profile/` + userId)\r\n    return profileAPI.getProfile(userId)\r\n  }\r\n}\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return  instance.get(`profile/` + userId)\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance.get(`profile/status/` + userId)\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put(`profile/status/`, {status})\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  me() {\r\n   return  instance.get(`auth/me`)\r\n  },\r\n  login(email: string, password: string, rememberMe: boolean = false) {\r\n    return  instance.post(`auth/login`,{email, password, rememberMe} )\r\n  },\r\n  logout() {\r\n    return  instance.delete(`auth/login` )\r\n  }\r\n}\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {userAPI} from \"../api/api\";\r\nimport {ProfileResponseType} from \"./profile-reducer\";\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_COUNT = 'SET-TOTAL-COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS'\r\n\r\n\r\nexport type SetUserType = {\r\n  type: 'SET-USERS'\r\n  users: initialStateType[]\r\n}\r\nexport type UnfollowActionType = {\r\n  type: 'UNFOLLOW'\r\n  userId: number\r\n}\r\nexport type FollowActionType = {\r\n  type: 'FOLLOW'\r\n  userId: number\r\n}\r\nexport type AddPostActionType = {\r\n  type: 'ADD POST'\r\n  newPostText: string\r\n\r\n}\r\nexport type StatusActionType = {\r\n  type: 'SET-STATUS'\r\n  status: string\r\n\r\n}\r\nexport type UpdateNewPostTextActionType = {\r\n  type: 'UPDATE-NEW-POST-TEXT'\r\n  newText: string\r\n}\r\nexport type UpdateNewMessageBodyActionType = {\r\n  type: 'UPDATE-NEW-MESSAGE-BODY'\r\n  body: string\r\n}\r\nexport type SendMessageActionType = {\r\n  type: 'SEND-MESSAGE'\r\n  newMessageBody: string\r\n}\r\nexport type SetCurrentPageType = {\r\n  type: 'SET-CURRENT-PAGE'\r\n  currentPage: number\r\n}\r\nexport type SetTotalCountType = {\r\n  type: 'SET-TOTAL-COUNT'\r\n  totalCount: number\r\n}\r\nexport type ToggleIsFetchingType = {\r\n  type: 'TOGGLE-IS-FETCHING'\r\n  isFetching: boolean\r\n}\r\nexport type ToggleIsFollowingProgressType = {\r\n  type: 'TOGGLE-IS-FOLLOWING-PROGRESS'\r\n  isFetching: boolean,\r\n  userId: number,\r\n\r\n}\r\nexport type setUserProfileType = {\r\n  type: 'SET-USER-TYPE'\r\n  profile: ProfileResponseType | null\r\n}\r\nexport type authActionType = {\r\n  type: 'SET_USER_DATA'\r\n  payload: {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: boolean\r\n  }\r\n}\r\nexport type ActionsTypes =\r\n  | AddPostActionType\r\n  | UpdateNewPostTextActionType\r\n  | UpdateNewMessageBodyActionType\r\n  | SendMessageActionType\r\n  | FollowActionType\r\n  | UnfollowActionType\r\n  | SetUserType\r\n  | SetCurrentPageType\r\n  | SetTotalCountType\r\n  | ToggleIsFetchingType\r\n  | setUserProfileType\r\n  | authActionType\r\n  | ToggleIsFollowingProgressType\r\n  | StatusActionType\r\n\r\n\r\nexport type locationType = {\r\n  city: string\r\n  country: string\r\n}\r\n\r\nexport type initialStateType = {\r\n  id: number\r\n  photos: { small: string, large: string }\r\n  followed: boolean\r\n  name: string\r\n  status: string\r\n  location: locationType\r\n\r\n}\r\nexport type statePropsType = {\r\n  users: initialStateType[]\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n  isFetching: boolean\r\n  followingInProgress: []\r\n}\r\n\r\nconst initialState: statePropsType = {\r\n  users: [],\r\n  pageSize: 5,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state: statePropsType = initialState,\r\n                      action: ActionsTypes): statePropsType => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, followed: true}\r\n          }\r\n          return u\r\n        })\r\n      }\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, followed: false}\r\n          }\r\n          return u\r\n        })\r\n      }\r\n    case SET_USERS: {\r\n      return {\r\n        ...state, users: action.users\r\n      }\r\n    }\r\n    case SET_CURRENT_PAGE:\r\n      return {\r\n        ...state, currentPage: action.currentPage\r\n      }\r\n    case SET_TOTAL_COUNT: {\r\n      return {\r\n        ...state, totalUsersCount: action.totalCount\r\n      }\r\n    }\r\n    case TOGGLE_IS_FETCHING: {\r\n      return {\r\n        ...state, isFetching: action.isFetching\r\n      }\r\n    }\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return <statePropsType>{\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter(id => id !== action.userId)\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n\r\n  }\r\n}\r\n\r\nexport const followSuccess = (userId: number): FollowActionType =>\r\n  ({type: FOLLOW, userId})\r\nexport const unfollowSuccess = (userId: number): UnfollowActionType =>\r\n  ({type: UNFOLLOW, userId})\r\nexport const setUsers = (users: initialStateType[]): SetUserType =>\r\n  ({type: SET_USERS, users})\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageType =>\r\n  ({type: SET_CURRENT_PAGE, currentPage})\r\nexport const setTotalUsersCount = (totalCount: number): SetTotalCountType =>\r\n  ({type: SET_TOTAL_COUNT, totalCount})\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingType =>\r\n  ({type: TOGGLE_IS_FETCHING, isFetching})\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number): ToggleIsFollowingProgressType =>\r\n  ({type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId})\r\n\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n  return (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(toggleIsFetching(true))\r\n\r\n    userAPI.getUsers(currentPage, pageSize).then(data => {\r\n      dispatch(toggleIsFetching(false))\r\n      dispatch(setUsers(data.items));\r\n      dispatch(setTotalUsersCount(data.totalCount))\r\n    })\r\n  }\r\n}\r\n\r\nexport const follow = (userID: number) => {\r\n  return (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(toggleIsFollowingProgress(true, userID))\r\n    userAPI.followed(userID).then(data => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(followSuccess(userID))\r\n      }\r\n      dispatch(toggleIsFollowingProgress(false, userID))\r\n    })\r\n  }\r\n}\r\n\r\nexport const unFollow = (userID: number) => {\r\n  return (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(toggleIsFollowingProgress(true, userID))\r\n    userAPI.unFollowed(userID).then(data => {\r\n      if (data.resultCode === 0) {\r\n        dispatch(unfollowSuccess(userID))\r\n      }\r\n      dispatch(toggleIsFollowingProgress(false, userID))\r\n    })\r\n  }\r\n}\r\n\r\nexport default usersReducer","export default __webpack_public_path__ + \"static/media/users.6f05a47e.jpg\";","import styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/img/users.jpg\";\r\nimport React from \"react\";\r\nimport {\r\n  initialStateType,\r\n} from \"../../redux/users-reducer\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type UsersType = {\r\n  users: initialStateType[]\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n\r\n  onPageChanged: (pageNumber: number) => void\r\n  toggleIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n  followingInProgress: []\r\n  follow: (userID: number) => void\r\n  unFollow: (userID: number) => void\r\n\r\n}\r\n\r\nexport const Users = (props: UsersType) => {\r\n  let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n  let pages = []\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i)\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {\r\n          pages.map(p => {\r\n            return <span\r\n              className={props.currentPage === p ? styles.selectedPage : ''}\r\n              onClick={() => {\r\n                props.onPageChanged(p)\r\n              }}\r\n            >{p}</span>\r\n          })\r\n        }\r\n\r\n\r\n      </div>\r\n      {\r\n        props.users.map(u => <div key={u.id}>\r\n                   <span>\r\n                       <div>\r\n                         <NavLink to={'/profile/' + u.id}>\r\n                           <img\r\n                             src={u.photos.small !== null ? u.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                           </NavLink>\r\n                       </div>\r\n                       <div>\r\n                           {\r\n                             u.followed\r\n                               ? <button\r\n                                 disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                 onClick={() => props.unFollow(u.id)}>Unfollow</button>\r\n\r\n                               : <button\r\n                                 disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                 onClick={() => props.follow(u.id)}>Follow</button>\r\n                           }\r\n                       </div>\r\n                   </span>\r\n          <span>\r\n                       <span>\r\n                           <div>{u.name}</div>\r\n                           <div>{u.status}</div>\r\n                       </span>\r\n                       <span>\r\n                           <div>{'u.location.country'}</div>\r\n                           <div>{'u.location.city'}</div>\r\n                       </span>\r\n                   </span>\r\n        </div>)\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/preloader.4c0dabf6.gif\";","import preloader from \"../../assets/img/preloader.gif\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const Preloader = () => {\r\n\r\n  return (\r\n    <div>\r\n      <img src={preloader}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  follow,\r\n  getUsers,\r\n  initialStateType,\r\n  setCurrentPage,\r\n  toggleIsFollowingProgress, unFollow,\r\n} from \"../../redux/users-reducer\";\r\nimport {AppPropsType} from \"../../redux/redux-store\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\ntype mapStateType = {\r\n  users: initialStateType[]\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n  isFetching: boolean\r\n  followingInProgress: []\r\n}\r\ntype mapDispatchType = {\r\n  setCurrentPage: typeof setCurrentPage\r\n  toggleIsFollowingProgress: typeof toggleIsFollowingProgress\r\n  getUsers: typeof getUsers\r\n  follow: typeof follow\r\n  unFollow: typeof unFollow\r\n\r\n}\r\nexport type UsersAPIType = {\r\n  users: initialStateType[]\r\n  setUsers: (users: initialStateType[]) => void\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n  setCurrentPage: (pageNumber: number) => void\r\n  setTotalUsersCount: (totalCount: number) => void\r\n  isFetching: boolean\r\n  toggleIsFetching: (isFetching: boolean) => void\r\n  toggleIsFollowingProgress: (isFetching: boolean, userId: number) => void\r\n  followingInProgress: []\r\n  getUsers: (currentPage: number, pageSize: number) => void\r\n  follow: (userID: number) => void\r\n  unFollow: (userID: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersAPIType> {\r\n\r\n  componentDidMount() {\r\n    this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n  }\r\n\r\n  onPageChanged = (pageNumber: number) => {\r\n    this.props.getUsers(pageNumber, this.props.pageSize)\r\n  }\r\n\r\n  render() {\r\n\r\n    return <>\r\n      {this.props.isFetching ? <Preloader/> : null}\r\n      <Users totalUsersCount={this.props.totalUsersCount}\r\n             pageSize={this.props.pageSize}\r\n             currentPage={this.props.currentPage}\r\n             onPageChanged={this.onPageChanged}\r\n             users={this.props.users}\r\n             toggleIsFollowingProgress={this.props.toggleIsFollowingProgress}\r\n             followingInProgress={this.props.followingInProgress}\r\n             follow={this.props.follow}\r\n             unFollow={this.props.unFollow}\r\n      />\r\n    </>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppPropsType): mapStateType => {\r\n  return {\r\n    users: state.usersPage.users,\r\n    pageSize: state.usersPage.pageSize,\r\n    totalUsersCount: state.usersPage.totalUsersCount,\r\n    currentPage: state.usersPage.currentPage,\r\n    isFetching: state.usersPage.isFetching,\r\n    followingInProgress: state.usersPage.followingInProgress\r\n  }\r\n}\r\n\r\nexport default WithAuthRedirect(connect<mapStateType, mapDispatchType, any, AppPropsType>(\r\n  mapStateToProps, {\r\n  setCurrentPage,\r\n  toggleIsFollowingProgress,\r\n  getUsers,\r\n  follow,\r\n  unFollow\r\n})(UsersContainer))\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {updateStatus} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfileStatusType = {\r\n  status: string\r\n  updateStatus: typeof updateStatus\r\n}\r\n\r\nclass ProfileStatus extends React.Component<ProfileStatusType> {\r\n  state = {\r\n    editMode: false,\r\n    status: this.props.status\r\n  }\r\n  activatedEditMode = () => {\r\n    this.setState({\r\n      editMode: true\r\n    })\r\n  }\r\n\r\n  deactivatedEditMode = () => {\r\n    this.setState({\r\n      editMode: false\r\n    })\r\n    this.props.updateStatus(this.state.status)\r\n  }\r\n\r\n  onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({\r\n      status: e.currentTarget.value\r\n    })\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>) {\r\n    if (prevProps.status !== this.props.status) {\r\n      this.setState({\r\n        status: this.props.status\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!this.state.editMode &&\r\n        <div>\r\n            <span\r\n                onDoubleClick={this.activatedEditMode}>{this.props.status}</span>\r\n        </div>\r\n        }\r\n        {this.state.editMode &&\r\n        <div>\r\n            <input autoFocus={true} onBlur={this.deactivatedEditMode}\r\n                   value={this.state.status} onChange={this.onStatusChange}/>\r\n        </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../../../common/Preloader/Preloader\";\r\nimport {\r\n  ProfileResponseType,\r\n  updateStatus\r\n} from \"../../../../redux/profile-reducer\";\r\nimport ProfileStatus from './ProfileStatus'\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n  profile: ProfileResponseType\r\n  status: string\r\n  updateStatus: typeof updateStatus\r\n}\r\nconst ProfileInfo = (props:ProfileInfoPropsType) => {\r\n  if(!props.profile) {\r\n    return <Preloader/>\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img*/}\r\n            {/*        src='https://buddy.ghostpool.com/wp-content/uploads/photodune-3382849-mountain3-s1-1003x480.jpg'/>*/}\r\n            {/*</div>*/}\r\n\r\n            <div className={s.descriptionBlock}>\r\n              <img src={props.profile.photos.large}/>\r\n              <div>{props.profile.aboutMe}</div>\r\n              <div>{props.profile.contacts.facebook}</div>\r\n              <div>{props.profile.contacts.website}</div>\r\n              <div>{props.profile.contacts.vk}</div>\r\n              <div>{props.profile.contacts.twitter}</div>\r\n              <div>{props.profile.contacts.instagram}</div>\r\n              <div>{props.profile.contacts.youtube}</div>\r\n              <div>{props.profile.lookingForAJob === true\r\n                ? <img src={'https://img5.okidoki.st/c/6/9/3/593086/7358148/15766165_6.jpg'}/>\r\n                : null}</div>\r\n              <div>{props.profile.lookingForAJobDescription}</div>\r\n              <div>{props.profile.fullName}</div>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import {postsType} from \"../components/Profile/MyPosts/MyPosts\";\r\nimport {\r\n  ActionsTypes,\r\n  AddPostActionType, setUserProfileType, StatusActionType,\r\n  UpdateNewPostTextActionType\r\n} from \"./users-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, userAPI} from \"../api/api\";\r\n\r\n\r\nconst ADD_POST = 'ADD POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_TYPE = 'SET-USER-TYPE';\r\nconst SET_STATUS = 'SET-STATUS';\r\n\r\nexport type stateProfilePropsType = {\r\n  posts: Array<postsType>\r\n  profile: ProfileResponseType | null\r\n  status: string\r\n}\r\n\r\nexport type ProfileResponseType = {\r\n  aboutMe: string\r\n  contacts: {\r\n    facebook: string\r\n    github: string\r\n    instagram: string\r\n    mainLink: string\r\n    twitter: string\r\n    vk: string\r\n    website: string\r\n    youtube: string\r\n  }\r\n  fullName: string\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  photos: {\r\n    large: string\r\n    small: string\r\n  }\r\n  userId: string | number\r\n}\r\n\r\nconst initialState = {\r\n  posts: [\r\n    {id: 1, message: 'Hello, how are you?', likeCounter: 12},\r\n    {id: 2, message: \"It's my first post!\", likeCounter: 11},\r\n  ],\r\n  profile: null,\r\n  status: ''\r\n\r\n}\r\n\r\nexport const profileReducer = (state: stateProfilePropsType = initialState,\r\n                               action: ActionsTypes) => {\r\n\r\n  switch (action.type) {\r\n    case ADD_POST: {\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likeCounter: 0\r\n      }\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n        newPostText: ''\r\n      }\r\n    }\r\n    case\r\n    UPDATE_NEW_POST_TEXT:\r\n      return {\r\n        ...state,\r\n        newPostText: action.newText\r\n      }\r\n    case\r\n    SET_STATUS:\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    case\r\n    SET_USER_TYPE:\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    default:\r\n      return state\r\n\r\n  }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText: string)\r\n  : AddPostActionType => ({type: ADD_POST, newPostText})\r\n\r\nexport const updateNewPostTextActionCreator = (text: string)\r\n  : UpdateNewPostTextActionType =>\r\n  ({type: UPDATE_NEW_POST_TEXT, newText: text})\r\n\r\nconst setUserProfile = (profile: ProfileResponseType | null)\r\n  : setUserProfileType =>\r\n  ({type: SET_USER_TYPE, profile})\r\n\r\nconst setStatus = (status: string)\r\n  : StatusActionType =>\r\n  ({type: SET_STATUS, status})\r\n\r\nexport const getUserProfile = (userId:number) => (dispatch: Dispatch)=> {\r\n  userAPI.getProfile(userId).then(response => {\r\n   dispatch(setUserProfile(response.data))\r\n  })\r\n}\r\n\r\nexport const getUserStatus = (userId:number) => (dispatch: Dispatch)=> {\r\n  profileAPI.getStatus(userId)\r\n    .then(response => {\r\n    dispatch(setStatus(response.data))\r\n  })\r\n}\r\n\r\nexport const updateStatus = (status:string) => (dispatch: Dispatch)=> {\r\n  profileAPI.updateStatus(status)\r\n    .then(response => {\r\n      if(response.data.resultCode === 0){\r\n        // dispatch(setStatus(response.data)) //{}\r\n       dispatch(setStatus(status))\r\n      }\r\n    })\r\n}\r\n\r\n","import React from 'react';\r\nimport classes from './Post.module.css'\r\n\r\ntype PostType = {\r\n    message: string\r\n    likeCounter: number\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n\r\n            <div className={classes.item}>\r\n                <img src='https://www.meme-arsenal.com/memes/7bdea6754f999b50e9577596f09197fb.jpg'/>\r\n                {props.message}\r\n                <div>\r\n                <span>Like </span>\r\n                    <span>{props.likeCounter}</span>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Post","import classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport React, {ChangeEvent} from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../units/validators\";\r\nimport { Textarea } from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport type postsType = {\r\n  id: number\r\n  message: string\r\n  likeCounter: number\r\n}\r\ntype MyPostsTypeProps = {\r\n  posts: Array<postsType>\r\n  newPostText: string\r\n  addPost: (newPostText:string) => void\r\n  updateNewPostText: (text: string) => void\r\n}\r\nexport type FormDataPostType = {\r\n  newPostText: string\r\n\r\n}\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nconst MyPosts = (props: MyPostsTypeProps) => {\r\n\r\n  let elementsPosts = props.posts\r\n    .map((p: { message: string; likeCounter: number; }) =>\r\n      <Post message={p.message} likeCounter={p.likeCounter}/>)\r\n  //\r\n  // let onAddPost = () => {\r\n  //   props.addPost()\r\n  // }\r\n  //\r\n  // let onChangePost = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n  //   let text = e.currentTarget.value\r\n  //   props.updateNewPostText(text)\r\n  // }\r\n\r\n  const onSubmit = (formData: FormDataPostType) => {\r\n    props.addPost(formData.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.postBlock}>\r\n      <h3>My posts</h3>\r\n\r\n      {/*<div>*/}\r\n      {/*    <div>*/}\r\n      {/*        <textarea value={props.newPostText} onChange={onChangePost}/>*/}\r\n      {/*    </div>*/}\r\n      {/*    <div>*/}\r\n      {/*        <button onClick={onAddPost}>Add post</button>*/}\r\n      {/*    </div>*/}\r\n      {/*</div>*/}\r\n      <MyPostReduxForm onSubmit={onSubmit} />\r\n      <div className={classes.posts}>\r\n        {elementsPosts}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyPosts\r\n\r\n\r\nexport const MyPostForm: React.FC<InjectedFormProps<FormDataPostType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field component={Textarea} name={'newPostText'} validate={[required, maxLength]}/>\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport const MyPostReduxForm = reduxForm<FormDataPostType>({form: 'newPostText'})(MyPostForm)","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {postsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {statePropsType} from \"../../../redux/store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//\r\n// type MyPostsContainerTypeProps = {\r\n//     // newPostText: string\r\n//     // posts: Array<postsType>\r\n//     // dispatch: (action: ActionsTypes) => void\r\n//     store:ReduxStoreType\r\n// }\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//     let state = props.store.getState()\r\n//\r\n//     let addPost = () => {\r\n//         props.store.dispatch(addPostActionCreator())\r\n//     }\r\n//\r\n//     let onChangePost = (text:string) => {\r\n//         let action = updateNewPostTextActionCreator(text);\r\n//         props.store.dispatch(action)\r\n//     }\r\n//\r\n//      return (<MyPosts updateNewPostText={onChangePost}\r\n//                       addPost={addPost}\r\n//                       posts={state.profilePage.posts}\r\n//                       newPostText={state.profilePage.newPostText}\r\n//\r\n//      />)\r\n// }\r\n//\r\n// export default MyPostsContainer\r\n\r\n\r\n\r\nconst mapStateToProps = (state: statePropsType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        },\r\n        updateNewPostText: (text:string) => {\r\n            let action = updateNewPostTextActionCreator(text);\r\n            dispatch(action)\r\n        }\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileResponseType, updateStatus} from \"../../redux/profile-reducer\";\r\n\r\n\r\n\r\nconst Profile = (props: any) => {\r\n        return (\r\n            <div>\r\n                <ProfileInfo\r\n                  profile={props.profile}\r\n                  status={props.status}\r\n                  updateStatus={props.updateStatus}/>\r\n                <MyPostsContainer/>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Profile\r\n\r\n","import React, {Component, ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppPropsType} from \"../../redux/redux-store\";\r\nimport {\r\n  getUserProfile, getUserStatus,\r\n  ProfileResponseType, updateStatus,\r\n} from \"../../redux/profile-reducer\";\r\nimport { RouteComponentProps, withRouter} from \"react-router-dom\";\r\n\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ownProps\r\n\r\ntype mapStateType = {\r\n  profile: ProfileResponseType | null\r\n  status: string\r\n\r\n}\r\n\r\ntype mdtpType = {\r\n  getUserProfile: typeof getUserProfile\r\n  getUserStatus: typeof getUserStatus\r\n  updateStatus: typeof updateStatus\r\n}\r\n\r\ntype ownProps = mapStateType & mdtpType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if(!userId){\r\n      userId = '2'\r\n    }\r\n    this.props.getUserProfile(+userId)\r\n    this.props.getUserStatus(+userId)\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profile\r\n          profile={this.props.profile}\r\n          status ={this.props.status}\r\n          updateStatus = {this.props.updateStatus}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppPropsType): mapStateType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n\r\n  }\r\n}\r\n// const AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\r\n// let WithUrlDataContainerComponent = withRouter<RouteComponentProps<PathParamsType>, any>(AuthRedirectComponent)\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {getUserProfile, getUserStatus, updateStatus}),\r\n  withRouter,\r\n  // WithAuthRedirect\r\n)(ProfileContainer)\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css'\r\n\r\ntype HeaderType = {\r\n  isAuth: boolean\r\n  login: null\r\n  logout: ()=> void\r\n}\r\n\r\nconst Header = (props:HeaderType) => {\r\n  return (\r\n    <header className={classes.header}>\r\n      <img\r\n        src='https://buddy.ghostpool.com/wp-content/themes/buddy/lib/images/logo.png'/>\r\n      <div className={classes.loginBlock}>\r\n        { props.isAuth\r\n          ? <div>{props.login } - <button onClick={props.logout} >Log out</button></div>\r\n          : <NavLink to={'/login'}> Login </NavLink> }\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header","import {ActionsTypes, authActionType} from \"./users-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\n\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\nexport type AuthPropsType = {\r\n  userId: null\r\n  email: null\r\n  login: null\r\n  isAuth: boolean\r\n}\r\n\r\nconst initialState = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: AuthPropsType = initialState, action: ActionsTypes) => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n}\r\n\r\n\r\nconst setAuthUserData = (userId: null, email: null, login: null, isAuth: boolean): authActionType =>\r\n  ({type: SET_USER_DATA, payload: {userId, email, login, isAuth}})\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n  authAPI.me()\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        let {id, login, email} = response.data.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n      }\r\n    })\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n  authAPI.login(email, password,rememberMe)\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        // @ts-ignore\r\n        dispatch(getAuthUserData())\r\n      }\r\n    })\r\n}\r\n\r\nexport const logout = () => (dispatch: Dispatch) => {\r\n  authAPI.logout()\r\n    .then(response => {\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n      }\r\n    })\r\n}","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppPropsType} from \"../../redux/redux-store\";\r\nimport {getAuthUserData, logout} from \"../../redux/auth-reducer\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean\r\n  login: null\r\n  logout: () => void\r\n}\r\n\r\ntype HeaderContainerType = {\r\n  getAuthUserData: () => void\r\n  isAuth: boolean\r\n  login: null\r\n  logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n  componentDidMount() {\r\n    this.props.getAuthUserData()\r\n  }\r\n\r\n  render() {\r\n    return <Header isAuth={this.props.isAuth}\r\n                   login={this.props.login}\r\n                   logout={this.props.logout}\r\n    />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppPropsType): mapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login,\r\n  logout: state.auth.logout\r\n})\r\n\r\nexport default connect(mapStateToProps, {getAuthUserData, logout})(HeaderContainer)","import {reduxForm, Field, InjectedFormProps,} from 'redux-form';\r\nimport {Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../units/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppPropsType} from \"../../redux/redux-store\";\r\n\r\nexport type FormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field placeholder={'Email'} component={Input} name={'email'}\r\n               validate={[required]}/>\r\n      </div>\r\n      <div>\r\n        <Field placeholder={'Password'} component={Input} type={'password'} name={'password'}\r\n               validate={[required]}/>\r\n      </div>\r\n      <div>\r\n        <Field type={'checkbox'} component={Input} name={'rememberMe'}/>\r\n        remember me\r\n      </div>\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'email'})(LoginForm)\r\n\r\n\r\nconst Login = (props:any) => {\r\n\r\n  const onSubmit = (formData: FormDataType) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n  if(props.isAuth) {\r\n    return <Redirect to={'/profile'}/>\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n  )\r\n}\r\nconst mapStateToProps = (state: AppPropsType)=>({\r\n  isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login)","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from './components/Login/Login';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <div className='app-wrapper'>\r\n        <HeaderContainer/>\r\n        <Navbar/>\r\n        <div className={'app-wrapper-content'}>\r\n          <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n          <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n          <Route path='/news' render={() => <News/>}/>\r\n          <Route path='/music' render={() => <Music/>}/>\r\n          <Route path='/settings' render={() => <Settings/>}/>\r\n          <Route path='/users' render={() => <UsersContainer/>}/>\r\n          <Route path='/login' render={() => <Login/>}/>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsTypes} from \"./users-reducer\";\r\n\r\n\r\ntype StateSidebarPropsType = {}\r\nconst initialState = {}\r\n\r\nexport const sidebarReducer = (state:StateSidebarPropsType =initialState , action:ActionsTypes)=> {\r\n    return state\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer, InjectedFormProps} from 'redux-form'\r\nimport {FormDataType} from \"../components/Login/Login\";\r\n\r\n\r\nexport type AppPropsType = ReturnType<typeof rootReducer>\r\ninterface IProps {\r\n  message: string;\r\n}\r\n\r\nconst rootReducer = combineReducers<InjectedFormProps<IProps> & any>({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n// @ts-ignore\r\nwindow.store = store\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\n\n// let rerenderEntireTree = () => {\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n            <App />\n            </Provider>\n        </BrowserRouter>, document.getElementById('root'));\n\n// }\n// //\n// // rerenderEntireTree()\n// //\n// // store.subscribe(rerenderEntireTree)\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2A2-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItem\":\"DialogItem_dialogsItem__EkYNt\",\"active\":\"DialogItem_active__34BdS\",\"img\":\"DialogItem_img__1qoc_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1KYCx\",\"error\":\"FormsControls_error__2vdGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3_GiW\",\"selectedPage\":\"users_selectedPage__2lK1t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__ZllVQ\",\"posts\":\"MyPosts_posts__2J3c4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__awzB9\",\"loginBlock\":\"Header_loginBlock__3k2ZH\"};"],"sourceRoot":""}